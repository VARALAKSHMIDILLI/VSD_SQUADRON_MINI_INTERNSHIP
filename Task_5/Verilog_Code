module rv32i_core (
    input clk,
    input reset,
    input [31:0] instr,
    output [31:0] pc,
    output [31:0] alu_result,
    output [31:0] reg_data
);

    // Program Counter
    reg [31:0] pc_reg;
    always @(posedge clk or posedge reset) begin
        if (reset)
            pc_reg <= 0;
        else
            pc_reg <= pc_reg + 4; // Simple increment by 4
    end

    // Instruction Decode
    wire [4:0] rs1 = instr[19:15];
    wire [4:0] rs2 = instr[24:20];
    wire [4:0] rd = instr[11:7];
    wire [6:0] opcode = instr[6:0];
    wire [2:0] funct3 = instr[14:12];
    wire [6:0] funct7 = instr[31:25];

    // Register File
    reg [31:0] registers [0:31];
    initial begin
        registers[0] = 0;
    end

    wire [31:0] reg_rs1 = registers[rs1];
    wire [31:0] reg_rs2 = registers[rs2];

    // ALU
    reg [31:0] alu_out;
    always @(*) begin
        case (funct3)
            3'b000: alu_out = reg_rs1 + reg_rs2; // ADD
            // Additional ALU operations here
            default: alu_out = 0;
        endcase
    end

    // Write Back
    always @(posedge clk) begin
        if (opcode == 7'b0110011) // R-type instructions
            registers[rd] <= alu_out;
    end

    assign pc = pc_reg;
    assign alu_result = alu_out;
    assign reg_data = registers[rd];

endmodule
